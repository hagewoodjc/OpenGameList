{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","add","item","post","JSON","stringify","getRequestOptions","update","Id","put","delete","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"0/BAOAA,YAAA,WACI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aAuFtB,MApFIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAKzB,OAJW,OAAPG,MACAC,KAAOD,KAGJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAKzB,OAJW,OAAPG,MACAC,KAAOD,KAGJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAKzB,OAJW,OAAPG,MACAC,KAAOD,KAGJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GACA,KAAM,IAAIC,OAAM,kBAGpB,IAAIV,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAe,IAAA,SAAIC,MACA,GAAIb,KAAML,KAAKC,OACf,OAAOD,MAAKD,KAAKoB,KAAKd,IAAKe,KAAKC,UAAUH,MAAOlB,KAAKsB,qBAC7Cf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIxBb,YAAAI,UAAAqB,OAAA,SAAOL,MACH,GAAIb,KAAML,KAAKC,QAAUiB,KAAKM,EAC9B,OAAOxB,MAAKD,KAAK0B,IAAIpB,IAAKe,KAAKC,UAAUH,MAAOlB,KAAKsB,qBAC5Cf,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIxBb,YAAAI,UAAAwB,OAAA,SAAOZ,IACH,GAAIT,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAK2B,OAAOrB,IAAK,GAAIsB,QAAAC,gBACpBlB,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAoB,kBAAR,WACI,MAAO,IAAIK,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAKpBjC,YAAAI,UAAAS,YAAR,SAAoBqB,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMvB,OAAOuB,OAAS,iBAzFtDlC,YAAAuC,YAACC,OAAAC,qFACDC,UAAA,cAAA1C","file":"item.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\nimport { AuthHttp } from \"./auth.http\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(private http: AuthHttp) { }\r\n\r\n    private baseUrl = \"api/items/\"; //web api url\r\n\r\n    // calls the [GET] /api/items/GetLatest{n} Web API method to retrieve the latest items.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\r\n    getRandom(num?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\r\n    get(id: number) {\r\n        if (id == null) {\r\n            throw new Error(\"id is required.\");\r\n        }\r\n\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [POST] /api/items/ Web API method to add a new item .\r\n    add(item: Item) {\r\n        var url = this.baseUrl;\r\n        return this.http.post(url, JSON.stringify(item), this.getRequestOptions())\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // calls the [PUT] /api/items/{id} Web API method to update an existing item.\r\n    update(item: Item) {\r\n        var url = this.baseUrl + item.Id;\r\n        return this.http.put(url, JSON.stringify(item), this.getRequestOptions())\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // calls [DELETE] /api/items/{id}| We b API method to delete the item with the given Id.\r\n    delete(id: number) {\r\n        var url = this.baseUrl + id;\r\n        return this.http.delete(url, new RequestOptions())\r\n                    .catch(this.handleError)\r\n    }\r\n\r\n    // returns a viable RequestOptions object to handle Json requests\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });        \r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"],"sourceRoot":"/source/"}